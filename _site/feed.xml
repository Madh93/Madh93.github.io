<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Miguel Hernández</title>
    <description>Dejando rastro de mi viaje hacia el conocimiento, compartiendo algunas historias y los proyectos más interesantes con los que me he tenido que topar y superar.</description>
    <link>http://www.migueldhdez.me/</link>
    <atom:link href="http://www.migueldhdez.me/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 03 Nov 2015 02:12:05 +0000</pubDate>
    <lastBuildDate>Tue, 03 Nov 2015 02:12:05 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Proyectos: ENSAMBLADOR EN RUBY</title>
        <description>&lt;h4 id=&quot;qu-es&quot;&gt;¿Qué es?&lt;/h4&gt;

&lt;p&gt;Un ensamblador escrito en Ruby para la &lt;a href=&quot;http://www.migueldhdez.me/realizacion-de-una-cpu-simple/&quot;&gt;CPU monociclo de 16-bit realizada en verilog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Como había comentado en el proyecto de la CPU simple, para comprobar el funcionamiento de la CPU era necesario introducir las instrucciones “código máquina”, en unos y ceros básicamente. Nadie programa en binario, es una locura, para ello existen los ensambladores.&lt;/p&gt;

&lt;p&gt;Un ensamblador no es más que un programa intermedio entre el software y el hardware, que traduce el código fuente escrito en lenguaje ensamblador a código máquina.&lt;/p&gt;

&lt;h4 id=&quot;caractersticas&quot;&gt;Características&lt;/h4&gt;

&lt;p&gt;El ensamblador, se llama Rips debido a algunas semejanzas con &lt;a href=&quot;https://en.wikipedia.org/wiki/MIPS_instruction_set&quot;&gt;MIPS&lt;/a&gt;. Este cuenta con las características más básicas de un ensamblador adaptadas a nuestra CPU:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;19 instrucciones&lt;/li&gt;
  &lt;li&gt;16 registros ($0-$15)&lt;/li&gt;
  &lt;li&gt;4 puetos de E/S (@0-@3)&lt;/li&gt;
  &lt;li&gt;Uso de etiquetas y comentarios&lt;/li&gt;
&lt;/ul&gt;

&lt;video autoplay=&quot;&quot; controls=&quot;&quot; loop=&quot;&quot; class=&quot;video-js vjs-default-skin col-lg-12&quot; data-setup=&quot;{}&quot;&gt;
  &lt;source src=&quot;http://zippy.gfycat.com/BareDirectAmericancreamdraft.webm&quot; type=&quot;video/webm&quot; /&gt;
&lt;/video&gt;

&lt;p&gt;El funcionamiento es muy sencillo. La idea es leer código en ensamblador (llamémoslo instrucciones .rips) y generar código binario. El ensamblador se encarga de analizar la morfología y sintaxis de las instrucciones .rips.&lt;/p&gt;

&lt;h4 id=&quot;uso&quot;&gt;Uso&lt;/h4&gt;

&lt;p&gt;Desde Github se puede descargar el código fuente y algunos ejemplos. También se puede instalar como gema desde la terminal o &lt;a href=&quot;https://rubygems.org/gems/rips&quot;&gt;RubyGems&lt;/a&gt;. Rips ha sido testeado en las versiones 1.9.3, 2.0, 2.1 y 2.2 de Ruby y no requiere de ninguna dependencia extra a parte del propio intérprete de Ruby.&lt;/p&gt;

&lt;p&gt;Para consultar en detalle el funcionamiento está disponible la &lt;a href=&quot;http://www.rubydoc.info/gems/rips/0.1.1&quot;&gt;documentación oficial&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;opinin-personal&quot;&gt;Opinión personal&lt;/h4&gt;

&lt;p&gt;Cuando me dieron la posibilidad de poder realizar un ensamblador para mi propia CPU, aunque suene a tópico, no lo dude ni un instante y me puse a ello desde el primer momento. Era algo que me llamaba mucho la atención.&lt;/p&gt;

&lt;p&gt;Durante la realización de la CPU mi compañero y yo, nos dábamos cuenta que depurar código en binario era una locura. Realizar un ensamblador, era algo que nos facilitaría mucho la vida, y así fue.&lt;/p&gt;

&lt;p&gt;La decisión de utilizar Ruby fue personal. Ruby es uno de mis lenguajes favoritos, consigo resultados rápidos y me divierto mucho programando en él.&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Nov 2015 00:47:12 +0000</pubDate>
        <link>http://www.migueldhdez.me/ensamblador-en-ruby</link>
        <guid isPermaLink="true">http://www.migueldhdez.me/ensamblador-en-ruby</guid>
        
        
        <category>proyectos</category>
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>Proyectos: REALIZACIÓN DE UNA CPU SIMPLE</title>
        <description>&lt;h4 id=&quot;qu-es&quot;&gt;¿Qué es?&lt;/h4&gt;

&lt;p&gt;Se trata de una CPU monociclo de 16-bit realizada en Verilog, un ejemplo perfecto para entender desde lo más básico cual es el verdadero funcionamiento de un microprocesador.&lt;/p&gt;

&lt;p&gt;Tradicionalmente una CPU ejecuta una instrucción tras otra. Estas instrucciones son almacenadas en una memoria de instrucciones. La unidad de control de la CPU es la responsable de extraer cada instrucción, decodificarla, y ejecutarla de manera secuencial mediante un contador de programa. Además de la memoria de instrucciones y un contador de programa, se suele disponer de un conjunto de registros donde almacenar los datos y una ALU (unidad aritmético-lógica) encargada de las operaciones más elementales.&lt;/p&gt;

&lt;h4 id=&quot;caractersticas&quot;&gt;Características&lt;/h4&gt;

&lt;p&gt;La CPU cuenta con una memoria de instrucciones con capacidad de 1024 instrucciones, un banco de 16 registros de 8 bits, una ALU con operaciones como asignación, suma, resta, and, or, diferencia, etc. y cuatro puertos de entrada/salida.&lt;/p&gt;

&lt;p&gt;&lt;a data-rel=&quot;prettyPhoto&quot; href=&quot;/assets/img/projects/content/realizacion-de-una-cpu-simple01.jpg&quot; data-animate=&quot;fadeInUp&quot;&gt;
  &lt;img src=&quot;/assets/img/projects/content/realizacion-de-una-cpu-simple01.jpg&quot; alt=&quot;Diseño de la CPU&quot; /&gt;
&lt;/a&gt;
Se han especificado una quincena de instrucciones: operaciones de ALU, operaciones de carga de datos, operaciones de entrada/salida, saltos incondicionales, saltos condicionale y saltos a subrutina con retorno. Todas ellas utilizan un Opcode variable entre 4 y 6 bits.&lt;/p&gt;

&lt;p&gt;Para comprobar el correcto funcionamiento de la CPU, escribimos un pequeño código en binario de una calculadora que utilizaba algunas de las instrucciones descritas anteriormente, como las operaciones aritméticas, los saltos y la interacción entre la entrada y salida.&lt;/p&gt;

&lt;p&gt;Sin embargo, como codificar instrucciones en binario es una lata, decidimos implementar un &lt;a href=&quot;http://www.migueldhdez.me/ensamblador-en-ruby/&quot;&gt;ensamblador para nuestra CPU&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;uso&quot;&gt;Uso&lt;/h4&gt;

&lt;p&gt;Desde Github se puede descargar el código fuente. El proyecto ha sido probado con el software oficial Altera Quartus II v12.1 bajo Linux y la &lt;a href=&quot;http://www.terasic.com.tw/cgi-bin/page/archive.pl?No=83&quot;&gt;fpga Altera DE1&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a data-rel=&quot;prettyPhoto&quot; href=&quot;/assets/img/projects/content/realizacion-de-una-cpu-simple02.jpg&quot; data-animate=&quot;fadeInUp&quot;&gt;
  &lt;img src=&quot;/assets/img/projects/content/realizacion-de-una-cpu-simple02.jpg&quot; alt=&quot;FPGA Altera DE1&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;opinin-personal&quot;&gt;Opinión personal&lt;/h4&gt;

&lt;p&gt;A día de hoy, este proyecto lo sigo considerando uno de los mayores retos. Ya no solo por el hecho de realizar mi propia CPU, que se dice pronto, sino por tener que trabajar de una manera totalmente diferente a la que estaba acostumbrado.&lt;/p&gt;

&lt;p&gt;Verilog es un lenguaje de descripción de hardware, y realmente no tiene nada que ver con cualquier lenguaje de programación convencional, la forma de enfocar el problema, y de como este se puede resolver es distinta.&lt;/p&gt;

&lt;p&gt;Por supuesto, la recompensa de haberlo finalizado supera todo el esfuerzo realizado.&lt;/p&gt;
</description>
        <pubDate>Thu, 29 Oct 2015 23:54:45 +0000</pubDate>
        <link>http://www.migueldhdez.me/realizacion-de-una-cpu-simple</link>
        <guid isPermaLink="true">http://www.migueldhdez.me/realizacion-de-una-cpu-simple</guid>
        
        
        <category>proyectos</category>
        
        <category>verilog</category>
        
      </item>
    
      <item>
        <title>Proyectos: IMPLEMENTACIÓN DE FTP</title>
        <description>&lt;h4 id=&quot;qu-es&quot;&gt;¿Qué es?&lt;/h4&gt;

&lt;p&gt;Se trata de una implementación del protocolo &lt;a href=&quot;https://es.wikipedia.org/wiki/File_Transfer_Protocol&quot;&gt;FTP&lt;/a&gt; escrito en C++ pero utilizando las librerías estándar de C, que sirve de ejemplo de una aplicación cliente-servidor utilizando el concepto de sockets.&lt;/p&gt;

&lt;p&gt;Los sockets no son más que un mecanismo que permite la comunicación de datos entre dos dispositivo conociendo su dirección del protocolo y el número de puerto correspondiente.&lt;/p&gt;

&lt;p&gt;El protocolo FTP es un protocolo de red que trabaja sobre la capa de aplicación, el cual permite la transferencia de ficheros entre un servidor y un cliente.&lt;/p&gt;

&lt;h4 id=&quot;caractersticas&quot;&gt;Características&lt;/h4&gt;

&lt;p&gt;Para tener un protocolo FTP, lo básico es disponer de la posibilidad de descargar archivos desde el servidor, como subirlos a él. Estas acciones se pueden realizar tanto mediante modo “activo” como “pasivo”.&lt;/p&gt;

&lt;video autoplay=&quot;&quot; controls=&quot;&quot; loop=&quot;&quot; class=&quot;video-js vjs-default-skin col-lg-12&quot; data-setup=&quot;{}&quot;&gt;
  &lt;source src=&quot;http://zippy.gfycat.com/FocusedDistantHuman.webm&quot; type=&quot;video/webm&quot; /&gt;
&lt;/video&gt;

&lt;p&gt;Además de esto, el usuario es posible navegar por el servidor ftp, moviéndose por los directorios del mismo, creando nuevas carpetas, o incluso eliminando algunos archivos.&lt;/p&gt;

&lt;video autoplay=&quot;&quot; controls=&quot;&quot; loop=&quot;&quot; class=&quot;video-js vjs-default-skin col-lg-12&quot; data-setup=&quot;{}&quot;&gt;
  &lt;source src=&quot;http://zippy.gfycat.com/WeeklyMadFattaileddunnart.webm&quot; type=&quot;video/webm&quot; /&gt;
&lt;/video&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;uso&quot;&gt;Uso&lt;/h4&gt;

&lt;p&gt;Desde Github se puede descargar el código fuente. En el mismo repositorio están las instrucciones para compilar los archivos. Cabe mencionar, que para comprobar el funcionamiento lo correcto sería lanzar los clientes desde diferentes directorios al servidor.&lt;/p&gt;

&lt;h4 id=&quot;opinin-personal&quot;&gt;Opinión personal&lt;/h4&gt;

&lt;p&gt;Este proyecto, fue el proyecto final de una asignatura de Redes. El objetivo era entender el concepto de los sockets, los cuales son indispensables en las comunicaciones.&lt;/p&gt;

&lt;p&gt;No fue un tema fácil de entender, sin embargo la realización de un protocolo FTP como ejemplo fue indispensable para entender la el funcionamiento de los sockets, y ya de paso profundizar en el funcionamiento de FTP (existiendo los conocidos modo activo y modo pasivo).&lt;/p&gt;
</description>
        <pubDate>Sun, 04 Oct 2015 02:33:41 +0100</pubDate>
        <link>http://www.migueldhdez.me/implementacion-de-ftp</link>
        <guid isPermaLink="true">http://www.migueldhdez.me/implementacion-de-ftp</guid>
        
        
        <category>proyectos</category>
        
        <category>c++</category>
        
        <category>c</category>
        
      </item>
    
      <item>
        <title>Proyectos: VISOR DE IMÁGENES EN QT</title>
        <description>&lt;h4 id=&quot;qu-es&quot;&gt;¿Qué es?&lt;/h4&gt;

&lt;p&gt;Se trata de un visor de imágenes escrito en C++ mediante el framework &lt;a href=&quot;http://www.qt.io/&quot;&gt;Qt&lt;/a&gt; que permite abrir y visualizar imágenes de diferentes formatos.&lt;/p&gt;

&lt;h4 id=&quot;caractersticas&quot;&gt;Características&lt;/h4&gt;

&lt;p&gt;Las imágenes se pueden ampliar, reducir y rotar.&lt;/p&gt;

&lt;video autoplay=&quot;&quot; controls=&quot;&quot; loop=&quot;&quot; class=&quot;video-js vjs-default-skin col-lg-12&quot; data-setup=&quot;{}&quot;&gt;
  &lt;source src=&quot;http://fat.gfycat.com/CharmingSaneBarb.webm&quot; type=&quot;video/webm&quot; /&gt;
&lt;/video&gt;

&lt;p&gt;Cabe destacar que se puede hacer zoom mediante atajo de teclado, menú o con la rueda del ratón.&lt;/p&gt;

&lt;p&gt;También contiene algunas utilidades como abrir con otra aplicación, abrir la ubicación de la imagen o cambiar el nombre de la misma.&lt;/p&gt;

&lt;video autoplay=&quot;&quot; controls=&quot;&quot; loop=&quot;&quot; class=&quot;video-js vjs-default-skin col-lg-12&quot; data-setup=&quot;{}&quot;&gt;
  &lt;source src=&quot;http://zippy.gfycat.com/PoisedEsteemedHeron.webm&quot; type=&quot;video/webm&quot; /&gt;
&lt;/video&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;uso&quot;&gt;Uso&lt;/h4&gt;

&lt;p&gt;Desde Github se puede descargar el código fuente. Para poder compilarlo y posteriormente ejecutarlo es necesario tener &lt;a href=&quot;http://www.qt.io/download/&quot;&gt;Qt 5 o superior&lt;/a&gt;. Ha sido testeado en las versiones 5.4 y 5.5.&lt;/p&gt;

&lt;h4 id=&quot;opinin-personal&quot;&gt;Opinión personal&lt;/h4&gt;

&lt;p&gt;Este fue uno de mis primeros proyectos con Qt, y pienso que es una muy buena forma de empezar con este potente framework, ya que contiene algunos elementos básicos como la utilización de menús y botones, además de trabajar con gráficos e imágenes.&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Sep 2015 20:54:42 +0100</pubDate>
        <link>http://www.migueldhdez.me/visor-de-imagenes-en-qt</link>
        <guid isPermaLink="true">http://www.migueldhdez.me/visor-de-imagenes-en-qt</guid>
        
        
        <category>proyectos</category>
        
        <category>c++</category>
        
        <category>qt</category>
        
      </item>
    
      <item>
        <title>Blog: Hola Mundo</title>
        <description>&lt;p&gt;¿Cómo no empezar el blog de un futuro ingeniero informático sin las dos palabras más famosas en el mundo de la programación?&lt;/p&gt;

&lt;p&gt;Desde hace años, leo a diario muchos blogs y jamás se me pasó por la cabeza la idea de realizar uno propio. Siempre lo he tenido claro: soy buen lector, no redactor. Y sin embargo estoy escribiendo la primera entrada de un blog, curioso. &lt;!--more--&gt;&lt;/p&gt;

&lt;h4 id=&quot;por-qu-escribir-un-blog&quot;&gt;¿Por qué escribir un blog?&lt;/h4&gt;

&lt;p&gt;Muchas personas tenemos siempre ideas en la cabeza de qué hacer cuando llegue verano, a veces esas ideas incluso llegan a nublar por completo nuestras actividades diarias, al menos en mi caso. Hace meses empecé a tener claro una cosa: tenía que darme a conocer. Aunque darse a conocer no tiene el mismo significado que ser famoso para mí, simplemente tener un pequeño hueco en internet donde poder ser localizado.&lt;/p&gt;

&lt;p&gt;Ya desde que comencé mis estudios universitarios aprendí la palabra &lt;em&gt;compartir&lt;/em&gt;. Me podía pasar días sin comer y noches sin dormir terminando mis prácticas de programación (programas que veo hoy en día y resolvería en unos pocos minutos), pero conseguir resolverlos me llenaba de satisfacción. Aún así, había algo que me llenaba aún más, compartir mis conocimientos con los demás. ¿Qué mejor forma de compartir mi trabajo que a través de mi página personal? No solamente para cualquiera que lo necesite, también como carta de presentación.&lt;/p&gt;

&lt;p&gt;Todavía no he nombrado nada sobre el porqué del blog, y la única razón es que el blog ha surgido de imprevisto. Creo que mostrar solamente mis proyectos no es suficiente, y no está de mal dejar alguna que otra opinión o anécdota que me vaya sucediendo.&lt;/p&gt;

&lt;h4 id=&quot;los-proyectos&quot;&gt;Los proyectos&lt;/h4&gt;

&lt;p&gt;Ya he hecho una lista de los proyectos que tengo pendiente por compartir. La mayoría ya tienen algo de tiempo, así que por desgracia no será solo cosa de copiar y pegar, ya que necesito revisarlos y corregir errores.&lt;/p&gt;

&lt;p&gt;Por otra parte, en menos de un mes empezaré mi último curso y aún ni siquiera se que aprenderé exactamente, pero subiré todos aquellos proyectos interesantes que ojalá no sean pocos. De momento un anticipo: &lt;a href=&quot;https://github.com/Madh93&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Aug 2015 23:53:24 +0100</pubDate>
        <link>http://www.migueldhdez.me/hola-mundo</link>
        <guid isPermaLink="true">http://www.migueldhdez.me/hola-mundo</guid>
        
        
        <category>blog</category>
        
        <category>hola</category>
        
      </item>
    
      <item>
        <title>Preguntas: ¿Has hecho este sitio desde cero?</title>
        <description>&lt;p&gt;La respuesta corta es: no.&lt;/p&gt;

&lt;p&gt;El diseño original se titula “Solid” hecho por &lt;a href=&quot;http://blacktie.co/&quot;&gt;BlackTie.co&lt;/a&gt; y &lt;a href=&quot;https://github.com/st4ple/solid-jekyll&quot;&gt;adaptado a Jekyll&lt;/a&gt; por Oliver Stapleton. Quería realizar un sitio sin tener que preocuparme de la elaboración del diseño. Y eso es lo que hecho, la idea original del diseño la he dejado intacta, mientras que en el resto de apartados como la mayor parte de la funcionalidad lo he modificado a lo que he creído acorde con mis necesidades.&lt;/p&gt;
</description>
        <pubDate>Sat, 22 Aug 2015 23:31:56 +0100</pubDate>
        <link>http://www.migueldhdez.me/preguntas/</link>
        <guid isPermaLink="true">http://www.migueldhdez.me/preguntas/</guid>
        
        
        <category>preguntas</category>
        
      </item>
    
      <item>
        <title>Preguntas: ¿Has aprendido contenido de forma autodidacta?</title>
        <description>&lt;p&gt;Sí, y bastante además. Algunas veces porque el material que he recibido en la universidad no ha sido el suficiente, pero también otras muchas por interés propio ya que hay mucho contenido que por desgracia no da tiempo de enseñar o directamente no se puede. La informática es un campo que evoluciona cada día, es entendible que el contenido que uno recibe en la carerra no siempre es el más nuevo.&lt;/p&gt;

&lt;p&gt;Pero esto no es un problema, hoy en día con internet es &lt;strong&gt;muy fácil&lt;/strong&gt; aprender cosas nuevas de manera autodidacta. Hay muchísimo contenido tanto de pago como gratuito de gran calidad. Páginas de aprendizaje como &lt;a href=&quot;https://www.codecademy.com/&quot;&gt;Codecademy&lt;/a&gt;, &lt;a href=&quot;https://www.codeschool.com&quot;&gt;Code School&lt;/a&gt; o &lt;a href=&quot;http://www.sitepoint.com/&quot;&gt;SitePoint&lt;/a&gt; que te permiten empezar desde cero lenguajes como Ruby, Python, Javascript, etc. Libros completos como &lt;a href=&quot;http://learnrubythehardway.org/book/&quot;&gt;Learn Ruby the Hard Way&lt;/a&gt;, &lt;a href=&quot;http://learnpythonthehardway.org/book/&quot;&gt;Learn Python the Hard Way&lt;/a&gt; o &lt;a href=&quot;https://www.railstutorial.org/book&quot;&gt;Rails Tutorial&lt;/a&gt;. Y por supuesto MOOC’s (cursos masivos online) &lt;a href=&quot;https://www.miriadax.net/&quot;&gt;Miríada X&lt;/a&gt;, &lt;a href=&quot;https://es.coursera.org/&quot;&gt;Coursera&lt;/a&gt; o &lt;a href=&quot;https://www.edx.org/&quot;&gt;edX&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sin todas estás páginas y muchas más que no he podido mencionar, no podría hacer muchas de las cosas que puedo hacer hoy en día y que todavía me quedan por aprender.&lt;/p&gt;
</description>
        <pubDate>Sat, 22 Aug 2015 20:54:46 +0100</pubDate>
        <link>http://www.migueldhdez.me/preguntas/</link>
        <guid isPermaLink="true">http://www.migueldhdez.me/preguntas/</guid>
        
        
        <category>preguntas</category>
        
      </item>
    
  </channel>
</rss>
